# version: '3.3'

# services:

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
#     ports:
#       - "9200:9200"
#       - "9300:9300"
#     configs:
#       - source: elastic_config
#         target: /usr/share/elasticsearch/config/elasticsearch.yml
#     environment:
#       ES_JAVA_OPTS: "-Xmx256m -Xms256m"
#       ELASTIC_PASSWORD: changeme
#       # Use single node discovery in order to disable production mode and avoid bootstrap checks.
#       # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
#       discovery.type: single-node
#       # Force publishing on the 'elk' overlay.
#       network.publish_host: _eth0_
#     networks:
#       - elk
#     deploy:
#       mode: replicated
#       replicas: 1

#   logstash:
#     image: docker.elastic.co/logstash/logstash:7.16.3
#     ports:
#       - "5044:5044"
#       - "5000:5000"
#       - "9600:9600"
#     configs:
#       - source: logstash_config
#         target: /usr/share/logstash/config/logstash.yml
#       - source: logstash_pipeline
#         target: /usr/share/logstash/pipeline/logstash.conf
#     environment:
#       LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#     networks:
#       - elk
#     deploy:
#       mode: replicated
#       replicas: 1

#   kibana:
#     image: docker.elastic.co/kibana/kibana:7.16.3
#     ports:
#       - "5601:5601"
#     configs:
#       - source: kibana_config
#         target: /usr/share/kibana/config/kibana.yml
#     networks:
#       - elk
#     deploy:
#       mode: replicated
#       replicas: 1

# configs:

#   elastic_config:
#     file: ./elasticsearch/config/elasticsearch.yml
#   logstash_config:
#     file: ./logstash/config/logstash.yml
#   logstash_pipeline:
#     file: ./logstash/pipeline/logstash.conf
#   kibana_config:
#     file: ./kibana/config/kibana.yml

# networks:
#   elk:
#     driver: overlay



# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

version: '3.2'

services:
  # elasticsearch:
  #   build:
  #     context: elasticsearch/
  #     args:
  #       ELK_VERSION: $ELK_VERSION
  #   volumes:
  #     - type: bind
  #       source: ./elasticsearch/config/elasticsearch.yml
  #       target: /usr/share/elasticsearch/config/elasticsearch.yml
  #       read_only: true
  #     - type: volume
  #       source: elasticsearch
  #       target: /usr/share/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx256m -Xms256m"
  #     # ELASTIC_PASSWORD: changeme
  #     # Use single node discovery in order to disable production mode and avoid bootstrap checks.
  #     # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
  #     discovery.type: single-node
  #   networks:
  #     - kafka-elk

  es01:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - data01:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=es01
      - cluster.name=es-log-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - kafka-elk
  
  es02:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - data02:/usr/share/elasticsearch/data:z
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=es02
      - cluster.name=es-log-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - kafka-elk

  es03:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - data03:/usr/share/elasticsearch/data:z
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=es03
      - cluster.name=es-log-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - kafka-elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # - type: bind
      #   source: ./logstash/config/logstash.yml
      #   target: /usr/share/logstash/config/logstash.yml
      #   read_only: true
      # - type: bind
      #   source: ./logstash/pipeline
      #   target: /usr/share/logstash/pipeline
      #   read_only: true
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - kafka-elk
    depends_on:
      - es01

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # - type: bind
      #   source: ./kibana/config/kibana.yml
      #   target: /usr/share/kibana/config/kibana.yml
      #   read_only: true
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    networks:
      - kafka-elk
    depends_on:
      - es03

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "9900:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-elk

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CREATE_TOPICS: "test-topic:1:1"Springboot
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka-elk

networks:
  kafka-elk:
    driver: bridge

volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
